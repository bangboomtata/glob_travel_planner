generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  password      String? // For email/password users
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Question {
  id        Int          @id @default(autoincrement())
  text      String
  type      QuestionType
  options   String[]
  createdAt DateTime     @default(now())

  @@map("questions")
}

model Itinerary {
  id                 Int             @id @default(autoincrement())
  generatedItinerary Json
  userId             Int
  status             ItineraryStatus @default(UNBOOKED)
  createdAt          DateTime        @default(now())

  preferenceId       Int
  preference         Preference     @relation(fields: [preferenceId], references: [id], onDelete: Cascade) 

  flightBooked      Boolean   @default(false)
  hotelBooked       Boolean   @default(false)
  
  flights            Flight[]        @relation("ItineraryFlights")
  places             Place[]         @relation("ItineraryPlaces")
  hotels             Hotel[]         @relation("ItineraryHotels")

  @@map("itineraries")
}

model Place {
  id            Int         @id @default(autoincrement())
  name          String
  googleMapLink String
  itineraries   Itinerary[] @relation("ItineraryPlaces")

  @@map("places")
}

model Flight {
  id                 Int      @id @default(autoincrement())
  flightDetails      Json?    
  itineraryId        Int
  createdAt          DateTime @default(now())

  itinerary          Itinerary @relation("ItineraryFlights", fields: [itineraryId], references: [id], onDelete: Cascade) 

  @@map("flights")
}

model Hotel {
  id                 Int      @id @default(autoincrement())
  hotelDetails       Json?    
  itineraryId        Int
  createdAt          DateTime @default(now())

  itinerary          Itinerary @relation("ItineraryHotels", fields: [itineraryId], references: [id], onDelete: Cascade) 

  @@map("hotels")
}

model Preference {
  id        Int      @id @default(autoincrement())
  userId    Int
  answers   Json
  createdAt DateTime @default(now())

  itineraries Itinerary[]

  @@map("preferences")
}


enum ItineraryStatus {
  UNBOOKED
  BOOKED
  NO_FLIGHTS
}

enum QuestionType {
  TRAVEL_TASTE
  DIETARY_RESTRICTIONS
  TRIP_DURATION
  AIRPORT
  START_DATE
  START_DATE_FLEXIBILITY
  BUDGET
  DISLIKE_ACTIVITIES
  TRAVEL_TASTE_2
  WEATHER
  OUTDOOR_ACTIVITIES
  CULTURE
  ATMOSPHERE
  NUMBER_OF_TRAVELERS
  PLACES_TO_AVOID
}
